var myVariable = `
{"0": {
    "doc": "EtherCAT Counter FoE Application",
    "title": "EtherCAT Counter FoE Application",
    "content": "This EtherCAT example application demonstrates the capable of doing firmware updates via FoE (File over EtherCAT) and EtherCAT Master ( TwinCAT Master ) slave ( EtherCAT LAN925x) communication with EVB_LAN925x_SAMD51 micro-controller. Microchip’s EtherCAT provides the information about how to configure and run the application on different EtherCAT platform. | Target Development board | Description | . | EVB_LAN9252_SAMD51 | ETherCAT evaluation board with LAN9252 | . | EVB_LAN9253_SAMD51 | ETherCAT evaluation board with LAN9253 | . ",
    "url": "http://localhost:4000/ethercat/apps/ethercat_counter_foe_app/readme.html#ethercat-counter-foe-application",
    "relUrl": "/apps/ethercat_counter_foe_app/readme.html#ethercat-counter-foe-application"
  },"1": {
    "doc": "EtherCAT Counter FoE Application",
    "title": "EtherCAT Counter FoE Application",
    "content": ". ",
    "url": "http://localhost:4000/ethercat/apps/ethercat_counter_foe_app/readme.html",
    "relUrl": "/apps/ethercat_counter_foe_app/readme.html"
  },"2": {
    "doc": "EtherCAT LAN925x Library",
    "title": "EtherCAT LAN925x Library",
    "content": "EtherCAT LAN925x slave device software utility framework is a layered software framework that enables other PIC and Cortex Microcontroller peripherals to work together. | LAN925x EtherCAT Framework . | EtherCAT Slave Framework | Description | . | LAN9252 EtherCAT Framework | The Framework explains about EtherCAT slave controller Interface layer w.r.t LAN9252 device | . | LAN9253 EtherCAT Framework | The Framework explains about EtherCAT slave controller Interface layer w.r.t LAN9253 device | . | . Ethernet for Control Automation Technology (EtherCAT) was developed by Beckhoff. EtherCAT is a fast and deterministic network, and processes data using dedicated hardware and software. It uses a full duplex, master-slave configuration. The LAN925x is a 2/3-port EtherCAT slave controller with dual integrated Ethernet PHYs which each contain a fullduplex 100BASE-TX transceiver and support 100Mbps (100BASE-TX) operation. Use of the Microchip EVB-LAN925x (and similar EtherCAT interface devices) requires use of the Beckhoff EtherCAT Slave Stack Code (SSC) and its associated configuration and code generation tool. | The interrupts have to be configured during hardware initialization. | PDI ( Process Data Interface ) Interrupt - The programmable system interrupts are generated internally by the various device sub-modules and can be configured to generate a single external host interrupt via the IRQ interrupt output pin. That is TwinCAT manager with enabled Synchron Synchronization mode. | DC - SYNC0 AND SYNC1 - If the application running on the SOC requires Distributed Clock, then SYNC0 and SYNC1 should be connected to the microcontroller’s interrupts lines. Refer to LAN9252 datasheet for configuration of SYNC0 and SYNC1. | TIMER Interupt - SSC has a variable which will count every millisecond, which can be implemented either timer interrupt or polling method. The interrupt/polling mode can be selected in the SSC Tool before creating the slave stack code. SSC will access EtherCAT core registers from both interrupt context and polling mode. So, the ECAT_CSR_CMD and ECAT_CSR_DATA registers has to be protected against simultaneous access which can corrupt the state machine inside the slave stack code. | . | Configure of Library . Configure the peripheral library using the MHC. EtherCAT Slave Device Indicators This section describes the LAN925x driver and EtherCAT trigger and counter variables are used to support visual inspection and troubleshooting of the driver and networks. | PDO ( Process Data Object Trigger and Counter ) - The PDO protocol is used for communication with External interrupt IRQ. | Index | Object | Type | Direction | . | 1 | 0x6000 | 32bit Counter | TX | . | Receive PDO Mapping ( Outputs ) - The PDO protocol is used for communication with External interrupt IRQ. | Index | Object | Type | Direction | . | 1 | 0x7010 | 32bit Counter | RX | . | Synchronization - The Beckhoff Slave Stack Code supports different modes of synchronization which are based on three physical signals: (PDI_)IRQ, Sync0 and Sync1 Microchip EtherCAT device also supports different modes. | Master and Slaves for synchronization: Free run The Master cycle time and Slave cycle time are independent. | IRQ interrupt event is triggered from Master for SM-Synchron Synchronization. | Both IRQ and SYNC0 event occurs for the DC-Synchron operation mode and SYNC0 and SYNC1 unit cycle time is configured 1000µs. | . | . | Using Library . File over EtherCAT (FoE) - Architecture – Host/Slave interaction states for firmware update. The Dual Bank feature enables a firmware to execute from the NVM and at the same time the program to the flash with a new version of itself. After programming is completed the APP_BankSwitch() application function is used to swap the banks and to reset the device. FOE demostartion with respect to ATSAMD51J19A device - . | Master changes from INIT to BOOT, then download of a file initiated. When state changes from INIT to BOOT, slave or the FoE application is ready to write the new FW or bin file at the BankB location( 0x40000 Bank B location for ATSAMD51j19A device ). Flag gFirmwareDownload_Started set to 1. | Master initiates Download command with default password value as 0x11223344 and bin file (this file is generated from the existing D51 foe studio project). In the slave FOE_FILEDOWNLOAD_PASSWORD is set to 0x11223344 and can be modified from EtherCAT MHC component configuration. FoE_Write() checks file name size ( limited to 16) and checks password value and then proceed to FoE_WriteData(). | Once Master completes bin file transfer, then Master need to change the state from BOOT to INIT. In the FW application or slave code, APP_FW_GetDownloadStateFinished() changes state to gFirmwareDownload_Started = 0 and APP_FW_StateBOOTtoINIT() changes gFirmwareDownload_Finished = 1. | Once State changes from BOOT to INIT, Slave application initiates bank switch application(APP_BankSwitch()) and software reset(run_application()). Then Bank A moves to BANK B location and the new application stored in BANK B , moved to BANK A with flash location 0x0. The new application starts running from flash location 0x0 and will be ready with new application. | . SSC tool FoE configuration - . | . ",
    "url": "http://localhost:4000/ethercat/driver/readme.html#ethercat-lan925x-library",
    "relUrl": "/driver/readme.html#ethercat-lan925x-library"
  },"3": {
    "doc": "EtherCAT LAN925x Library",
    "title": "EtherCAT LAN925x Library",
    "content": ". ",
    "url": "http://localhost:4000/ethercat/driver/readme.html",
    "relUrl": "/driver/readme.html"
  },"4": {
    "doc": "EtherCAT LAN9252 Library",
    "title": "EtherCAT LAN9252 Library",
    "content": "Ethernet for Control Automation Technology (EtherCAT) was developed by Beckhoff. EtherCAT is a fast and deterministic network, and processes data using dedicated hardware and software. It uses a full duplex, master-slave configuration. The LAN922 is a 2/3-port EtherCAT slave controller with dual integrated Ethernet PHYs which each contain a fullduplex 100BASE-TX transceiver and support 100Mbps (100BASE-TX) operation. EtherCAT Slave Controller Interface layer is designed for Microchip MCUs to communicate with LAN9252 EtherCAT Slave controller. This EtherCAT framework is configured with the communication interfaces (QSPI (SPI mode), GPIO). This communication Interface layer which will acts like bridge between EtherCAT Slave Stack Code (SSC) and Host peripherals to communicate with LAN9252. SSC Stack (generated from standard SSC tool) have feature to transfer the File over EtherCAT (FoE) for MCU firmware upgrade from TwinCAT tool. ",
    "url": "http://localhost:4000/ethercat/driver/docs/readme_drvlan9252.html#ethercat-lan9252-library",
    "relUrl": "/driver/docs/readme_drvlan9252.html#ethercat-lan9252-library"
  },"5": {
    "doc": "EtherCAT LAN9252 Library",
    "title": "Fatures Supported",
    "content": ". | This library supports LAN 9252 slave device | This library useful to the different 32 bit Microcontroller device | LAN9252 doesn’t support Run LED. So this feature has to be enabled by PDI SOC if it is needed. LAN9252 supports Error LED. EVB-LAN9252-SAMD51 supports ERROR LED indicator. For ELD status ON - . | Indicates EEPROM loading error | Indicates the failure EtherCAT slave connectivity link | Application Layer Event (AL Event) error indication | EtherCAT State mode transition error indication | . | Driver supports only SPI Indirect mode . | Process Data Interface Mode | EEPROM Source Data Config | . | SPI Indirect Mode | 0x80 | . The above EEPROM Source Data config details are provided to the ESC CONFIG DATA of the &lt; ethercat repo &gt; /apps/ethercat_counter_foe_app/firmware/src/slave_stack/lan9252/Microchip-SAMD51-LAN9252-SSC_Config.xml file. | FoE (File Over EtherCAT) can be used to download and upload a file to an EtherCAT device. Bank Switch algorithm is used to switch the new firmware downloaded. | The SPI Slave module provides a low pin count synchronous slave interface that facilitates communication between the device and a host system. The SPI Slave allows access to the System CSRs and internal FIFOs and memories. The following is an overview of the functions provided by the SPI/SQI Slave: . | Serial Read: 4-wire (clock, select, data in and data out) reads Serial command, address and data. Single and multiple register reads with incrementing, decrementing or static addressing. | . | The Beckhoff Slave Stack Code supports different modes of synchronization which are based on three physical signals: (PDI_)IRQ, Sync0 and Sync1.Both SM-Synchron and Distributed Clocks (DC) synchronization are supported. | . ",
    "url": "http://localhost:4000/ethercat/driver/docs/readme_drvlan9252.html#fatures-supported",
    "relUrl": "/driver/docs/readme_drvlan9252.html#fatures-supported"
  },"6": {
    "doc": "EtherCAT LAN9252 Library",
    "title": "LAN 9252 Firmware Overview",
    "content": ". | MHC generated drv_lan9252_ecat_util.c and drv_lan9252_ecat_util.h files are interfaced to Lan 9252 driver and these files are part of the &lt; ethercat repo &gt;/apps/ethercat_counter_foe_app/firmware/src/config/sam_d51_lan9252_evb/driver/lan9252 | The templates for both Lan9252 Slave driver and the software framework are part of the &lt; ethercat repo &gt;/driver/lan9252/templates | . | Name | Description | . | ECAT_Initialization | Initialize the QSPI call back registration for SPI mode and LAN 9252 driver Initialization | . | ECAT_Util_Initialize | Initialize the hardware interface (SPI) and Timer peripheral used for Slave Controller | . | ECAT_Lan9252_SPIWrite | Initiates a write transfer to Slave Controller via selected PDI | . | ECAT_Lan9252_SPIRead | Initiates a fast-read transfer to Slave Controller via selected PDI | . | ECAT_Lan9252_SPIReadPDRAM | Initiates a read process data RAM transfer to Slave Controller via selected PDI | . | ECAT_Lan9252_SPIWritePDRAM | Initiates a write process data RAM transfer to Slave Controller via selected PDI | . | ECAT_ESCIRQInitialization | Interrupt service routine initialization for the interrupt from EtherCAT Slave Controller | . | ECAT_SyncInterruptsInitialization | Sync0 and Sync1 Interrupt service routine Initialization | . ",
    "url": "http://localhost:4000/ethercat/driver/docs/readme_drvlan9252.html#lan-9252-firmware-overview",
    "relUrl": "/driver/docs/readme_drvlan9252.html#lan-9252-firmware-overview"
  },"7": {
    "doc": "EtherCAT LAN9252 Library",
    "title": "EtherCAT LAN9252 Library",
    "content": ". ",
    "url": "http://localhost:4000/ethercat/driver/docs/readme_drvlan9252.html",
    "relUrl": "/driver/docs/readme_drvlan9252.html"
  },"8": {
    "doc": "EtherCAT LAN9253 Library",
    "title": "EtherCAT LAN9253 Library",
    "content": "Ethernet for Control Automation Technology (EtherCAT) was developed by Beckhoff. EtherCAT is a fast and deterministic network, and processes data using dedicated hardware and software. It uses a full duplex, master-slave configuration. The LAN9253 is a 2/3-port EtherCAT slave controller with dual integrated Ethernet PHYs which each contain a fullduplex 100BASE-TX transceiver and support 100Mbps (100BASE-TX) operation. EtherCAT Slave Controller Interface layer is designed for Microchip MCUs to communicate with LAN9253 EtherCAT Slave controller. This EtherCAT framework is configured with the communication interfaces (QSPI (SPI mode), GPIO). This communication Interface layer which will acts like bridge between EtherCAT Slave Stack Code (SSC) and Host peripherals to communicate with LAN9253. SSC Stack (generated from standard SSC tool) have feature to transfer the File over EtherCAT (FoE) for MCU firmware upgrade from TwinCAT tool. ",
    "url": "http://localhost:4000/ethercat/driver/docs/readme_drvlan9253.html#ethercat-lan9253-library",
    "relUrl": "/driver/docs/readme_drvlan9253.html#ethercat-lan9253-library"
  },"9": {
    "doc": "EtherCAT LAN9253 Library",
    "title": "Fatures Supported",
    "content": ". | This library supports LAN 9253 slave device | This library useful to the different 32 bit Microcontroller device | LAN9253 doesn’t support Run LED. So this feature has to be enabled by PDI SOC if it is needed. LAN9253 supports Error LED. EVB-LAN9253-SAMD51 supports ERROR LED indicator. For ELD status ON - . | Indicates EEPROM loading error | Indicates the failure EtherCAT slave connectivity link | Application Layer Event (AL Event) error indication | EtherCAT State mode transition error indication | . | Driver supports SPI Indirect, SPI Direct and Beckhoff SPI mode of Process Data Interface(PDI) selection. | Process Data Interface Mode | EEPROM Source Data Config | . | SPI Indirect Mode | 0x80 | . | SPI Direct Mode | 0x82 | . | SPI Beckhoff Mode | 0x05 | . These above EEPROM Source Data config data is provided to the ESC CONFIG DATA of the Microchip-SAMD51-EtherCAT-Slave_SSC_Config_SPI_XXX_mode.xml file. | FoE (File Over EtherCAT) can be used to download and upload a file to an EtherCAT device. Bank Switch algorithm is used to switch the new firmware downloaded. | The SPI Slave module provides a low pin count synchronous slave interface that facilitates communication between the device and a host system. The SPI Slave allows access to the System CSRs and internal FIFOs and memories. The following is an overview of the functions provided by the SPI/SQI Slave: . | Serial Read: 4-wire (clock, select, data in and data out) reads at up to 30 MHz Serial command, address and data. Single and multiple register reads with incrementing, decrementing or static addressing. | Fast Read: 4-wire (clock, select, data in and data out) reads at up to 50 MHz Serial command, address and data. Dummy Byte(s) for first access. Single and multiple register reads with incrementing, decrementing or static addressing. | . | The Beckhoff Slave Stack Code supports different modes of synchronization which are based on three physical signals: (PDI_)IRQ, Sync0 and Sync1.Both SM-Synchron and Distributed Clocks (DC) synchronization are supported. | . ",
    "url": "http://localhost:4000/ethercat/driver/docs/readme_drvlan9253.html#fatures-supported",
    "relUrl": "/driver/docs/readme_drvlan9253.html#fatures-supported"
  },"10": {
    "doc": "EtherCAT LAN9253 Library",
    "title": "LAN 9253 Firmware Overview",
    "content": ". | drv_lan9253_ecat_util.c and drv_lan9253_ecat_util.h files are interfaced to Lan 9253 driver. | . | Name | Description | . | ECAT_Initialization | Initialize the hardware interface (SPI) used to communicate with Slave Controller | . | ECAT_Lan9253_IsPDIFunctional | Verifies the hardware interface (SPI) is functional or not | . | ECAT_Lan925x_SPIWrite | Initiates an Indirect mode write transfer to Slave Controller via selected PDI | . | ECAT_Lan925x_SPIRead | Initiates an Indirect mode read transfer to Slave Controller via selected PDI | . | ECAT_Lan925x_SPIFastRead | Initiates an Indirect mode fast-read transfer to Slave Controller via selected PDI | . | ECAT_Lan925x_SPIReadPDRAM | Initiates an Indirect mode read process data RAM transfer to Slave Controller via selected PDI | . | ECAT_Lan925x_SPIFastReadPDRAM | Initiates an Indirect mode fast-read process data RAM transfer to Slave Controller via selected PDI | . | ECAT_Lan925x_SPIWritePDRAM | Initiates an Indirect mode write process data RAM transfer to Slave Controller via selected PDI | . | ECAT_Lan9253_SPIWrite | Initiates a direct mode write transfer to Slave Controller via selected PDI | . | ECAT_Lan9253_SPIRead | Initiates a direct mode read transfer to Slave Controller via selected PDI | . | ECAT_Lan9253_SPIFastRead | Initiates a direct mode fast-read transfer to Slave Controller via selected PDI | . | ECAT_Lan9253_Beckhoff_SPIWrite | Initiates a Beckhoff mode write transfer to Slave Controller via selected PDI | . | ECAT_Lan9253_Beckhoff_SPIRead | Initiates a Beckhoff mode read transfer to Slave Controller via selected PDI | . | ECAT_ESCIRQInitialization | Interrupt service routine initialization for the interrupt from EtherCAT Slave Controller | . | ECAT_SyncInterruptsInitialization | Sync0 and Sync1 Interrupt service routine Initialization | . ",
    "url": "http://localhost:4000/ethercat/driver/docs/readme_drvlan9253.html#lan-9253-firmware-overview",
    "relUrl": "/driver/docs/readme_drvlan9253.html#lan-9253-firmware-overview"
  },"11": {
    "doc": "EtherCAT LAN9253 Library",
    "title": "EtherCAT LAN9253 Library",
    "content": ". ",
    "url": "http://localhost:4000/ethercat/driver/docs/readme_drvlan9253.html",
    "relUrl": "/driver/docs/readme_drvlan9253.html"
  },"12": {
    "doc": "EVB LAN9252 SAMD51 Application",
    "title": "EtherCAT Counter FoE Application for EVM_LAN9252_SAMD51",
    "content": "This EtherCAT example application demonstrates the capable of doing firmware updates via FoE (File over EtherCAT) and EtherCAT Master ( TwinCAT Master ) slave ( EtherCAT LAN9252) communication with EVB_LAN9252_SAMD51 micro-controller. Microchip’s EtherCAT provides the information about how to configure and run the application on different EtherCAT platform. | MPLAB® Harmony Software Setup | Hardware Setup | MPLAB Harmony configuration | Build The EtherCAT Application | Running The Application . | Slave Stack Code (SSC) Generation | TwinCAT Manager and Microchip EtherCAT Slave communication . | TwinCAT EtherCAT interface detect and EEPROM Programming | Trigger and Counter Demonstration | File over EtherCAT communication | . | . | . ",
    "url": "http://localhost:4000/ethercat/apps/ethercat_counter_foe_app/docs/readme_lan9252_samd51.html#ethercat-counter-foe-application-for-evm_lan9252_samd51",
    "relUrl": "/apps/ethercat_counter_foe_app/docs/readme_lan9252_samd51.html#ethercat-counter-foe-application-for-evm_lan9252_samd51"
  },"13": {
    "doc": "EVB LAN9252 SAMD51 Application",
    "title": "MPLAB® Harmony Software Setup",
    "content": "The following MPLAB® software components are a prerequisite for the rest of the steps in this demonstration. Please follow the download and installation instructions available at below links. | MPLAB® X Integrated Development Environment | MPLAB® XC32/32++ C Compiler | MPLAB® Harmony Configurator | On the management PC, download and Install on the TwinCAT 3 Engineering Full Setup at https://www.beckhoff.com/english.asp?download/tc3-download-xae.htm. Select the latest TwinCAT 3.1 Version and click on the link. Note the dialog box shows the TwinCAT tool that will be installed TC31-Full-Setup.3.1.XXXX.XX and click on “Start Download”. Follow instructions to download. | . ",
    "url": "http://localhost:4000/ethercat/apps/ethercat_counter_foe_app/docs/readme_lan9252_samd51.html#mplab-harmony-software-setup",
    "relUrl": "/apps/ethercat_counter_foe_app/docs/readme_lan9252_samd51.html#mplab-harmony-software-setup"
  },"14": {
    "doc": "EVB LAN9252 SAMD51 Application",
    "title": "Hardware Setup",
    "content": "The following tools will be used to program and debug the application on the target hardware. | MPLAB® ICD4 + ICD4/PICKIT 3 Target Adapter Board using JTAG interface. | . The following development board will be used for EtherCAT application development and run the application. | LAN9252 - EtherCAT Slave Controller evaluation kit with SAMD51 Microcontroller . The instructions in this guide are also applicable to other development boards with LAN9252 EtherCAT slave device. Hardware settings are board dependent and may vary between boards. | Connect a micro USB cable to J8 port for power source. | For programming, Connect a ICD4 JTAG cable to the J10 port of the EVB_LAN9252_SAMD51. | RJ45 connector is connected to the TwinCAT Manager using J1 port. | Block diagram of the EVB_LAN9252_SAMD51 board - . | . ",
    "url": "http://localhost:4000/ethercat/apps/ethercat_counter_foe_app/docs/readme_lan9252_samd51.html#hardware-setup",
    "relUrl": "/apps/ethercat_counter_foe_app/docs/readme_lan9252_samd51.html#hardware-setup"
  },"15": {
    "doc": "EVB LAN9252 SAMD51 Application",
    "title": "MPLAB® Harmony configuration",
    "content": "There are two options available for downloading/installing the MPLAB® Harmony Software Repositories from github &amp; gitee. The required repositories can be cloned from the github (or gitee) by using a local git client (such git bash). The MPLAB® Harmony Repositories are available at the following links: . https://github.com/Microchip-MPLAB-Harmony/ . https://gitee.com/Microchip-MPLAB-Harmony/ . The csp, dev_packs, mhc and ethercat repositories should be cloned. The required repositories can also be cloned (downloaded) or previously downloaded repositories can also be updated by using the MPLAB® Harmony 3 Content Manager. The following sections provide details on using the MPLAB® Harmony 3 Content Manager to download the repositories. | Refer to the EtherCAT MPLAB® Harmony Software Setup https://github.com/Microchip-MPLAB-Harmony/ethercat/wiki/create-your-first-ethercat-application details to create a EtherCAT project. | The following Project Graph diagram shows the required Harmony components those are included for the present EtherCAT application for the EVB_LAN9252_SAMD51. | Click on the EtherCAT Stack in the Project Graph window. In the Configuration window, . | The Slave Stack source directory path points to the folder that contains the files generated by the SSC tool. | Enable FoE checkbox enables File over EtherCAT feature. | . | Click on LAN9252 component from the project graph. | EtherCAT Interrupt Priority Level :- This is the range, equal to or more than this value, all the interrupts will be disabled during EtherCAT interrupt handler in process. | Following table maps EtherCAT interrupt name with respective peripheral channel selection. EIC interrupt handler and the SPI chip select Configuration for EVB_LAN9252_SAMD51 . | Interrupt Name | EIC Channel | . | SYNC0 Interrupt | EIC_EXTINT0 | . | SYNC1 Interrupt | EIC_EXTINT1 | . | IRQ Interrupt | EIC_EXTINT7 | . | Other Usage | Port Pin | . | SPI Chip Select | PORT RB11 | . | Error Select Pin | PORT RB31 | . | . NOTE - As per the Microcontroller and LAN9252 interrupt support, EIC/GPIO/PIO pins can be selected for External event registration and event handler processing. | EIC, QSPI and TC0 are configured as per the application requirement. | These are the below PINs configured for the application . | QSPI PIN Configuration for EVB_LAN9252_SAMD51 . | QSPI Custom Name | Function | PORT PIN ID | . | QSPI_MOSI | QSPI_DATA0 | PA08 | . | QSPI_MISO | QSPI_DATA1 | PA09 | . | QSPI_SCK | QSPI_SCK | PB10 | . | SPI_CS | GPIO | PB11 | . | PIN Configuration for EtherCAT External Interrupt Pins for EVB_LAN9252_SAMD51 . | EIC Custom Name | EIC Channel | Port Pin | . | EIC_EXTINT0 | EIC_EXTINT0 | PORT PB16 | . | EIC_EXTINT1 | EIC_EXTINT1 | PORT PB17 | . | EIC_EXTINT7 | EIC_EXTINT7 | PORT PB23 | . | . | Open NVIC configuration window from MHC→Tools. The QSPI Interrupt Priority Level to 2 and it is below to the configured parameter of the EtherCAT Interrupt Priority Level from LAN9252 component . | The application will use the default clock options. No changes are required in clock settings. | The application use a customized linker file which is used for FOE application. ROM_LENGTH of the linker file is modified to 0x40000 for ATSAMD51J19A. The memory mapped for Bank A is from 0x00000 to 0x3FFFF and the memory mapped for Bank B is from 0x40000 to 0x7FFFF. The Dual Bank feature enables a FoE firmware to be executed from the NVM and at the same time the program to the flash with a new version of itself.After programming is completed, the APP_BankSwitch() application function is used to swap the banks and to reset the device. APP_RunApplication() is used to run the new firmware to be executed. Customized linker file can be selected after unchecking the Add linker file to project option and this option is present at MHC project graph System&gt;Project Configuration&gt;Tool Chain Selections&gt;Add linker file to project . See the below screen shots: . | Generate the code by clicking the Generate Code button (marked in red). | The following diagram presents the One Click generated EtherCAT project, which is without Slave stack code except sample_app.c file. Slave stack code will be generated using SSC tool with the required configuration and Microchip-SAMD51-EtherCAT-Slave_SSC_Config.xml file. Right side is the EtherCAT project with supported SSC stack files. | . ",
    "url": "http://localhost:4000/ethercat/apps/ethercat_counter_foe_app/docs/readme_lan9252_samd51.html#mplab-harmony-configuration",
    "relUrl": "/apps/ethercat_counter_foe_app/docs/readme_lan9252_samd51.html#mplab-harmony-configuration"
  },"16": {
    "doc": "EVB LAN9252 SAMD51 Application",
    "title": "Building The EtherCAT Application",
    "content": "This section demonstrates the MPLAB X IDE projects for the ethercat_counter_foe_app application. The following table list the MPLAB X projects available for the demonstration. The path for the following project which is part of this project table, is available at &lt; install-dir &gt;/ethercat/apps/ethercat_counter_foe_app/firmware. | MPLABx project table . | Project Name | Target Device | Target Development board | Description | . | sam_d51_lan9252_evb.X | ATSAMD51J19A | EVB-LAN9252_SAMD51 | ETherCAT evaluation board with LAN9252 | . | The project contains the MPLAB® Harmony components that are required for an EtherCAT application. The application files need to be added to the project. | . The application source files for the ethercat_counter_foe_app demo which are available in Harmony_Repo_Path/h3/ethercat/apps/ethercat_counter_foe_app/firmware/src. | The app.c, app.h, main.c files are updated to demonstrate the application. | The apps/ethercat_counter_foe_app/firmware/src/config/sam_d51_lan9252_evb/ethercat_foe.ld linker file is a modified linker file which is used for FOE application. | The sample application files sample_app.c, sample_app.h and sample_appObjects.h which are generated by SSC tool and are updated for the application requirement. The above SSC tool generated sample application files are updated for Counter and Trigger peripheral interface and also updated for the FoE read/write operations. we can find these files in path apps/ethercat_counter_foe_app/firmware/src/slave_stack. | Verify the XC32 Compiler Toolchain version and set the Connected Hardware Tool to ICD4 J10 or PICkit 3. Press Apply button and then press OK button. | Build the application by clicking on the Build Main Project. | . ",
    "url": "http://localhost:4000/ethercat/apps/ethercat_counter_foe_app/docs/readme_lan9252_samd51.html#building-the-ethercat-application",
    "relUrl": "/apps/ethercat_counter_foe_app/docs/readme_lan9252_samd51.html#building-the-ethercat-application"
  },"17": {
    "doc": "EVB LAN9252 SAMD51 Application",
    "title": "Running The Application",
    "content": "Slave Stack Code (SSC) Generation . Steps to generate Slave Stack Code . TwinCAT Manager and Microchip EtherCAT Slave communication . TwinCAT EtherCAT interface detect and EEPROM Programming . | Upon successful installation of the TwinCAT Manager, the network adapter will be moved to Installed and ready to use devices section as shown in the following figure. Copy the available SAMD51_EtherCAT_Slave.xml file from &lt; harmony-repo &gt;app/ethercat/slave_stack/lan9252/ directory to the TwinCAT\\3.1\\Config\\Io\\EtherCAT directory. | In TwinCAT XAE, create a New Project (File=&gt;New=&gt;Project). In the New Project Window, select the TwinCAT Projects option and then click OK . | Connect port zero (J1 connection) of the EVB_LAN9252_SAMD51 board to the TwinCAT master using a RJ45 Ethernet cable, and then power up the board. The Link/Act LED should be ON at Port zero when the cable is connected. If the Link/Act LED is not ON, then this indicates that there is an issue with the connection or the cable. | Expand the IO option in the TwinCAT XAE project window and right click on Devices. Select Scan. | Click OK if the TwinCAT network interface is selected and continue scanning as shown in the below image. | Click OK to continue scanning and Click Yes in the Scan for boxes prompt. | EEPROM Programming After a successful scan, click on Device 2 (EtherCAT) in the solution explorer window of the TwinCAT tool and Click Online in the TwinCAT project window. Once this is done, highlight the Device, and it should read OP. | . Trigger and Counter Demonstration . | Input Trigger configuration - From I/O level on the Solution Explorer (left window), go to Devices=&gt;Device # (EtherCAT)=&gt;Box 1 (SAMD51 EtherCAT Slave)=&gt;Outputs process data mapping=&gt;Trigger. | In the top center window, select Online tab. Click Write and then enter 1 in Decimal: field and click OK. | Output Counter Observation - From I/O level on the Solution Explorer (left window), go to Devices=&gt;Device # (EtherCAT)=&gt;Box 1 (SAMD51 EtherCAT Slave)=&gt;Inputs process data mapping=&gt;Counter. | In the top center window, select Online tab. The counter value should be incrementing. | . File over EtherCAT communication . | FoE (File over EtherCAT) Test Update - Click on Box1, Select “Online” tab. Before FoE test Curent state and Requested state should be in OP mode. | For file download, change the mode from INIT to BOOT mode. | After clicking Download button , select BIN file that need to be downloaded and configure the Password as per the EtherCAT component password configuration. The sample BIN files are present in &lt; harmony-repo &gt;/ethercat/apps/ethercat_counter_foe_app/firmware/src/FoE_Bin_imagefiles/lan9252_foe_binfiles which can be used for the FoE verification. NOTE - One can generate BIN file from the generated EtheCAT HEX image after configuring the Project Properties-&gt;Conf:-&gt;Building-&gt;Execute This Line After Build \${MP_CC_DIR}/xc32-objcopy” -I ihex -O binary “\${DISTDIR}/\${PROJECTNAME}.\${IMAGE_TYPE}.hex” “\${DISTDIR}/\${PROJECTNAME}.\${IMAGE_TYPE}.bin . NOTE - Please uncheck Execute This Line After Build option for a debug session of this project. | The download process can be tracked as shown in the figure below- . | After successful download, change the state from BOOT to INIT mode. This helps the application switch the bank from BANK B to BANK A and the newly downloaded firmware will be executed from BANK A. The new application starts running from flash location 0x0. | . ",
    "url": "http://localhost:4000/ethercat/apps/ethercat_counter_foe_app/docs/readme_lan9252_samd51.html#running-the-application",
    "relUrl": "/apps/ethercat_counter_foe_app/docs/readme_lan9252_samd51.html#running-the-application"
  },"18": {
    "doc": "EVB LAN9252 SAMD51 Application",
    "title": "EVB LAN9252 SAMD51 Application",
    "content": ". ",
    "url": "http://localhost:4000/ethercat/apps/ethercat_counter_foe_app/docs/readme_lan9252_samd51.html",
    "relUrl": "/apps/ethercat_counter_foe_app/docs/readme_lan9252_samd51.html"
  },"19": {
    "doc": "EVB LAN9253 SAMD51 Application",
    "title": "EtherCAT Counter FoE Application for EVM_LAN9253_SAMD51",
    "content": "This EtherCAT example application demonstrates the capable of doing firmware updates via FoE (File over EtherCAT) and EtherCAT Master ( TwinCAT Master ) slave ( EtherCAT LAN9253) communication with EVB_LAN9253_SAMD51 micro-controller. Microchip’s EtherCAT provides the information about how to configure and run the application on different EtherCAT platform. | MPLAB® Harmony Software Setup | Hardware Setup | MPLAB Harmony configuration | Build The EtherCAT Application | Running The Application . | Slave Stack Code (SSC) Generation | TwinCAT Manager and Microchip EtherCAT Slave communication . | TwinCAT EtherCAT interface detect and EEPROM Programming | Trigger and Counter Demonstration | File over EtherCAT communication | . | . | . ",
    "url": "http://localhost:4000/ethercat/apps/ethercat_counter_foe_app/docs/readme_lan9253_samd51.html#ethercat-counter-foe-application-for-evm_lan9253_samd51",
    "relUrl": "/apps/ethercat_counter_foe_app/docs/readme_lan9253_samd51.html#ethercat-counter-foe-application-for-evm_lan9253_samd51"
  },"20": {
    "doc": "EVB LAN9253 SAMD51 Application",
    "title": "MPLAB® Harmony Software Setup",
    "content": "The following MPLAB® software components are a prerequisite for the rest of the steps in this demonstration. Please follow the download and installation instructions available at below links. | MPLAB® X Integrated Development Environment | MPLAB® XC32/32++ C Compiler | MPLAB® Harmony Configurator | On the management PC, download and Install on the TwinCAT 3 Engineering Full Setup at https://www.beckhoff.com/english.asp?download/tc3-download-xae.htm. Select the latest TwinCAT 3.1 Version and click on the link. Note the dialog box shows the TwinCAT tool that will be installed TC31-Full-Setup.3.1.XXXX.XX and click on “Start Download”. Follow instructions to download. | . ",
    "url": "http://localhost:4000/ethercat/apps/ethercat_counter_foe_app/docs/readme_lan9253_samd51.html#mplab-harmony-software-setup",
    "relUrl": "/apps/ethercat_counter_foe_app/docs/readme_lan9253_samd51.html#mplab-harmony-software-setup"
  },"21": {
    "doc": "EVB LAN9253 SAMD51 Application",
    "title": "Hardware Setup",
    "content": "The following tools will be used to program and debug the application on the target hardware. | MPLAB® ICD4 + ICD4/PICKIT 3 Target Adapter Board using JTAG interface. | . The following development board will be used for EtherCAT application development and run the application. | LAN9253 - EtherCAT Slave Controller evaluation kit with SAMD51 Microcontroller . The instructions in this guide are also applicable to other development boards with LAN9253 EtherCAT slave device. Hardware settings are board dependent and may vary between boards. | Connect a micro USB cable to J8 port for power source. | For programming, Connect a ICD4 JTAG cable to the J10 port of the EVB_LAN9253_SAMD51. | RJ45 connector is connected to the TwinCAT Manager using J1 port. | Block diagram of the EVB_LAN9253_SAMD51 board - . | . ",
    "url": "http://localhost:4000/ethercat/apps/ethercat_counter_foe_app/docs/readme_lan9253_samd51.html#hardware-setup",
    "relUrl": "/apps/ethercat_counter_foe_app/docs/readme_lan9253_samd51.html#hardware-setup"
  },"22": {
    "doc": "EVB LAN9253 SAMD51 Application",
    "title": "MPLAB® Harmony configuration",
    "content": "There are two options available for downloading/installing the MPLAB® Harmony Software Repositories from github &amp; gitee. The required repositories can be cloned from the github (or gitee) by using a local git client (such git bash). The MPLAB® Harmony Repositories are available at the following links: . https://github.com/Microchip-MPLAB-Harmony/ . https://gitee.com/Microchip-MPLAB-Harmony/ . The csp, dev_packs, mhc and ethercat repositories should be cloned. The required repositories can also be cloned (downloaded) or previously downloaded repositories can be updated by using the MPLAB® Harmony 3 Content Manager. The following sections provide details on using the MPLAB® Harmony 3 Content Manager to download the repositories. | Refer to the EtherCAT MPLAB® Harmony Software Setup https://github.com/Microchip-MPLAB-Harmony/ethercat/wiki/create-your-first-ethercat-application details to create a EtherCAT project. | The following Project Graph diagram shows the required Harmony components those are included for the present EtherCAT application for the EVB_LAN9253_SAMD51. | Click on the EtherCAT Stack in the Project Graph window. In the Configuration window, . | The Slave Stack source directory path points to the folder that contains the files generated by the SSC tool. | Enable FoE checkbox enables File over EtherCAT feature. | . | Click on LAN9253 component from the project graph. | EtherCAT Interrupt Priority Level :- This is the range, equal to or more than this value, all the interrupts will be disabled during EtherCAT interrupt handler in process. | Following table maps EtherCAT interrupt name with respective peripheral channel selection. EIC interrupt handler and the SPI chip select Configuration for EVB_LAN9253_SAMD51 . | Interrupt Name | EIC Channel | . | SYNC0 Interrupt | EIC_EXTINT0 | . | SYNC1 Interrupt | EIC_EXTINT1 | . | IRQ Interrupt | EIC_EXTINT7 | . | Other Usage | Port Pin | . | SPI Chip Select | PORT RB11 | . | Error Select Pin | PORT RB31 | . | . NOTE - As per the Microcontroller and LAN9253 interrupt support, EIC/GPIO/PIO pins can be selected for External event registration and event handler processing. | SPI Cofiguration Mode Supported | Description | . | ETHERCAT_SPI_INDIRECT_MODE_ACCESS | SPI Indirect Mode | . | ETHERCAT_SPI_DIRECT_MODE_ACCESS | SPI Direct Mode | . | ETHERCAT_SPI_BECKHOFF_MODE_ACCESS | SPI Beckhoff Mode | . | EIC, QSPI and TC0 are configured as per the application requirement. | These are the below PINs configured for the application . | QSPI PIN Configuration for EVB_LAN9253_SAMD51 . | QSPI Custom Name | Function | PORT PIN ID | . | QSPI_MOSI | QSPI_DATA0 | PA08 | . | QSPI_MISO | QSPI_DATA1 | PA09 | . | QSPI_SCK | QSPI_SCK | PB10 | . | SPI_CS | GPIO | PB11 | . | PIN Configuration for EtherCAT External Interrupt Pins for EVB_LAN9253_SAMD51 . | EIC Custom Name | EIC Channel | Port Pin | . | EIC_EXTINT0 | EIC_EXTINT0 | PORT PB16 | . | EIC_EXTINT1 | EIC_EXTINT1 | PORT PB17 | . | EIC_EXTINT7 | EIC_EXTINT7 | PORT PB23 | . | . | Open NVIC configuration window from MHC→Tools. The QSPI Interrupt Priority Level to 2 and it is below to the configured parameter of the EtherCAT Interrupt Priority Level from LAN9253 component . | The application will use the default clock options. No changes are required in clock settings. | The application use a customized linker file which is used for FOE application. ROM_LENGTH of the linker file is modified to 0x40000 for ATSAMD51J19A. The memory mapped for Bank A is from 0x00000 to 0x3FFFF and the memory mapped for Bank B is from 0x40000 to 0x7FFFF. The Dual Bank feature enables a FoE firmware to be executed from the NVM and at the same time the program to the flash with a new version of itself.After programming is completed, the APP_BankSwitch() application function is used to swap the banks and to reset the device. APP_RunApplication() is used to run the new firmware to be executed. Customized linker file can be selected after unchecking the Add linker file to project option and this option is present at MHC project graph System&gt;Project Configuration&gt;Tool Chain Selections&gt;Add linker file to project . See the below screen shots: . | Generate the code by clicking the Generate Code button (marked in red). | The following diagram presents the One Click generated EtherCAT project, which is without Slave stack code except sample_app.c file. Slave stack code will be generated using SSC tool with the required configuration and Microchip-SAMD51-EtherCAT-Slave_SSC_Config.xml file. Right side is the EtherCAT project with supported SSC stack files. | . ",
    "url": "http://localhost:4000/ethercat/apps/ethercat_counter_foe_app/docs/readme_lan9253_samd51.html#mplab-harmony-configuration",
    "relUrl": "/apps/ethercat_counter_foe_app/docs/readme_lan9253_samd51.html#mplab-harmony-configuration"
  },"23": {
    "doc": "EVB LAN9253 SAMD51 Application",
    "title": "Building The EtherCAT Application",
    "content": "This section demonstrates the MPLAB X IDE projects for the ethercat_counter_foe_app application. The following table list the MPLAB X projects available for the demonstration. These projects are available inside &lt; install-dir &gt;/ethercat/apps/ethercat_counter_foe_app/firmware . | MPLABx project table . | Project Name | Target Device | Target Development board | Description | . | sam_d51_lan9253_evb.X | ATSAMD51J19A | EVB-LAN9253_SAMD51 | ETherCAT evaluation board with LAN9253 | . | The project contains the MPLAB® Harmony components that are required for an EtherCAT application. The application files need to be added to the project. The application source files for the ethercat_counter_foe_app which are available in Harmony_Repo_Path/h3/ethercat/apps/ethercat_counter_foe_app/firmware/src. | The app_lan9253.c, app.h, main.c files are updated to demonstrate the application. | The apps/ethercat_counter_foe_app/firmware/src/config/samd51_lan9253_evb/ethercat_foe.ld linker file is a modified linker file which is used for FOE application. | The sample application files sample_app.c, sample_app.h and sample_appObjects.h which are generated by SSC tool and are updated for the application requirement. The above SSC tool generated sample application files are updated for Counter and Trigger peripheral interface and also updated for the FoE read/write operations. we can find these files in path apps/ethercat_counter_foe_app/firmware/src/slave_stack. | Verify the XC32 Compiler Toolchain version and set the Connected Hardware Tool to ICD4 or PICkit 3. Press Apply button and then press OK button. | Build the application by clicking on the Build Main Project. | . ",
    "url": "http://localhost:4000/ethercat/apps/ethercat_counter_foe_app/docs/readme_lan9253_samd51.html#building-the-ethercat-application",
    "relUrl": "/apps/ethercat_counter_foe_app/docs/readme_lan9253_samd51.html#building-the-ethercat-application"
  },"24": {
    "doc": "EVB LAN9253 SAMD51 Application",
    "title": "Running The Application",
    "content": "Slave Stack Code (SSC) Generation . Steps to generate Slave Stack Code . TwinCAT Manager and Microchip EtherCAT Slave communication . TwinCAT EtherCAT interface detect and EEPROM Programming . | Upon successful installation of the TwinCAT Manager, the network adapter will be moved to Installed and ready to use devices section as shown in the following figure. Please find the below table for the available Slave configuration files which are generated by SSC tool. | Slave Configuration File | Mode | . | SAMD51_SPI_Indirect_Mode.xml | SPI Indirect mode | . | SAMD51_SPI_Direct_mode.xml | SPI Direct mode | . | MSAMD51_SPI_Beckhoff_mode.xml | SPI Beckhoff mode | . Copy the required configuration file as per the configuration mode is selected during MHC Lan9253 Component configuration from &lt; harmony-repo &gt;/ethercat/slave_stack/lan9253/ directory to the TwinCAT\\3.1\\Config\\Io\\EtherCAT directory. | In TwinCAT XAE, create a New Project (File=&gt;New=&gt;Project). In the New Project Window, select the TwinCAT Projects option and then click OK . | Connect port zero (J1 connection) of the EVB_LAN9253_SAMD51 board to the TwinCAT master using a RJ45 Ethernet cable, and then power up the board. The Link/Act LED should be ON at Port zero when the cable is connected. If the Link/Act LED is not ON, then this indicates that there is an issue with the connection or the cable. | Expand the IO option in the TwinCAT XAE project window and right click on Devices. Select Scan. | Click OK if the TwinCAT network interface is selected and continue scanning as shown in the below image. | Click OK to continue scanning and Click Yes in the Scan for boxes prompt. | EEPROM Programming After a successful scan, click on Device 2 (EtherCAT) in the solution explorer window of the TwinCAT tool and Click Online in the TwinCAT project window. Once this is done, highlight the Device, and it should read OP. | . Trigger and Counter Demonstration . | Input Trigger configuration - From I/O level on the Solution Explorer (left window), go to Devices=&gt;Device # (EtherCAT)=&gt;Box 1 (SAMD51 EtherCAT Slave)=&gt;Outputs process data mapping=&gt;Trigger. | In the top center window, select Online tab. Click Write and then enter 1 in Decimal: field and click OK. | Output Counter Observation - From I/O level on the Solution Explorer (left window), go to Devices=&gt;Device # (EtherCAT)=&gt;Box 1 (SAMD51 EtherCAT Slave)=&gt;Inputs process data mapping=&gt;Counter. | In the top center window, select Online tab. The counter value should be incrementing. | . File over EtherCAT communication . | FoE (File over EtherCAT) Test Update - Click on Box1, Select “Online” tab. Before FoE test Curent state and Requested state should be in OP mode. | For file download, change the mode from INIT to BOOT mode. | After clicking Download button , select BIN file that need to be downloaded and configure the Password as per the EtherCAT component password configuration. The sample BIN files are present in &lt; harmony-repo &gt;/ethercat/apps/ethercat_counter_foe_app/firmware/src/FoE_Bin_imagefiles/lan9252_foe_binfiles which can be used for the FoE verification. NOTE - One can generate BIN file from the generated EtheCAT HEX image after configuring the Project Properties-&gt;Conf:-&gt;Building-&gt;Execute This Line After Build \${MP_CC_DIR}/xc32-objcopy” -I ihex -O binary “\${DISTDIR}/\${PROJECTNAME}.\${IMAGE_TYPE}.hex” “\${DISTDIR}/\${PROJECTNAME}.\${IMAGE_TYPE}.bin . NOTE - Please uncheck Execute This Line After Build option for a debug session of this project. | The download process can be tracked as shown in the figure below- . | After successful download, change the state from BOOT to INIT mode. This helps the application switch the bank from BANK B to BANK A and the newly downloaded firmware will be executed from BANK A. The new application starts running from flash location 0x0. | . ",
    "url": "http://localhost:4000/ethercat/apps/ethercat_counter_foe_app/docs/readme_lan9253_samd51.html#running-the-application",
    "relUrl": "/apps/ethercat_counter_foe_app/docs/readme_lan9253_samd51.html#running-the-application"
  },"25": {
    "doc": "EVB LAN9253 SAMD51 Application",
    "title": "EVB LAN9253 SAMD51 Application",
    "content": ". ",
    "url": "http://localhost:4000/ethercat/apps/ethercat_counter_foe_app/docs/readme_lan9253_samd51.html",
    "relUrl": "/apps/ethercat_counter_foe_app/docs/readme_lan9253_samd51.html"
  },"26": {
    "doc": "Slave Stack Code Generation",
    "title": "Slave Stack Code Generation",
    "content": ". | Download the Slave Stack Code (SSC) Tool from EtherCAT.org website. An EtherCAT membership is necessary to download the code. The following link can be used to download the tool. EtherCAT Slave Stack Code (SSC) v5.12 . | Install the SSC Tool on the control/management PC | Open the SSC Tool and navigate to File =&gt; New to create a New Project | Select Custom and then click Import . | For Lan9252 Slave device Import “Microchip-SAMD51-LAN9252-SSC_Config.xml” configuration file from &lt; Harmony Directory &gt;/ethercat/apps/ethercat_counter_foe_app/firmware/src/slave_stack/lan9252/. For Lan9253 Slave device, there are different SSC configuration files are present at &lt; Harmony Directory &gt;/ethercat/apps/ethercat_counter_foe_app/firmware/src/slave_stack/lan9253/ , please find the below table for the avavilable configuration file LAN9253 device - . | SSC Configuration file | Mode | Supported or Not Supported | . | Microchip-SAMD51-EtherCAT-Slave_SSC_Config_SPI_Indirect_mode.xml | SPI Indirect mode | Supported | . | Microchip-SAMD51-EtherCAT-Slave_SSC_Config_SPI_Direct_mode.xml | SPI Direct mode | Supported | . | Microchip-SAMD51-EtherCAT-Slave_SSC_Config_SPI_Beckhoff_mode.xml | SPI Beckhoff mode | Supported | . After importing this configuration file, the Microchip - EtherCAT Slave Controller &lt; Microchip &gt; will appear in the custom field. Select this and click OK. Click Yes to the next two prompts . | The driver drv_lan9252.c is required for Lan9252 slave configuration and to select file , Click yes. In the SSC tool navigate to the &lt; Harmony Directory &gt;/ethercat/apps/ethercat_counter_foe_app/firmware/src/config/sam_d51_lan9252_evb/driver/lan9252 directory to point to the drv_lan9252.c file and click Open. This will load the code. NOTE - For Lan9253 Slave configuration file, one need to select drv_lan9253.c file from the driver/lan9253/src/drv_lan9253.c and remaining steps are similar to lan9252 steps. | Click on Tools=&gt;Application=&gt;Import and select sample_app.xlsx application file from the path &lt; Harmony Directory &gt;/ethercat/apps/ethercat_counter_foe_app/firmware/src/slave_stack . Click OK to the next prompt . | Click on Tools=&gt;Create New Slave Files. When prompted to save the project, save the project in the directory provided with name SAMD51_EtherCAT_Slave.esp. | Click the Project drop-down menu in the tool bar and select Create New Slave Files. The pop-up windows open the newly slave file project ( SAMD51_EtherCAT_Slave.esp ), . | Click the Start button to create a new project file, Src folder, and ESI file (Slave Information file) in the desired directory path. | A pop-up window will indicate that the files have been successfully created. Click OK to continue. | Along with generated new slave files, ESI file (.xml file) also will be generated. This ESI file will have information about new Vendor ID and object configuration. This ESI file will be used by the TwinCAT Manager and is used to be programmed using “EEPROM Programming”. | . NOTE - EEPROM Programming is described in Running the demo application section . | Browse to the directory where the new files were created, as shown in the example: . | Src (Folder): This folder contains the Beckhoff Slave Stack code. | SAMD51_EtherCAT_Slave (ESP): This is the SSC Tool project file. | SAMD51_EtherCAT_Slave (XML): This is the EtherCAT® slave information file that must be used as an input to the EtherCAT master tool to configure EtherCAT® slave controllers. | . | The generated sample_app.c , does not have the counter, trigger configuration details and FoE read/write operations. So, the present sample_app.c, sample_app.h, sample_appObject.h can be updated from the location &lt; Harmony Directory &gt;/ethercat/apps/ethercat_counter_foe_app/firmware/src/slave_stack. | . ",
    "url": "http://localhost:4000/ethercat/apps/docs/readme_ssctool.html",
    "relUrl": "/apps/docs/readme_ssctool.html"
  },"27": {
    "doc": "EtherCAT Library and Applications",
    "title": "EtherCAT Library and Applications",
    "content": "![Microchip logo](https://raw.githubusercontent.com/wiki/Microchip-MPLAB-Harmony/Microchip-MPLAB-Harmony.github.io/images/microchip_logo.png) ![Harmony logo small](https://raw.githubusercontent.com/wiki/Microchip-MPLAB-Harmony/Microchip-MPLAB-Harmony.github.io/images/microchip_mplab_harmony_logo_small.png) # MPLAB® Harmony 3 EtherCAT MPLAB® Harmony 3 is an extension of the MPLAB® ecosystem for creating embedded firmware solutions for Microchip 32-bit SAM and PIC® microcontroller and microprocessor devices. Refer to the following links for more information. - [Microchip 32-bit MCUs](https://www.microchip.com/design-centers/32-bit) - [Microchip 32-bit MPUs](https://www.microchip.com/design-centers/32-bit-mpus) - [Microchip MPLAB X IDE](https://www.microchip.com/mplab/mplab-x-ide) - [Microchip MPLAB® Harmony](https://www.microchip.com/mplab/mplab-harmony) - [Microchip MPLAB® Harmony Pages](https://microchip-mplab-harmony.github.io/) This repository contains the MPLAB® Harmony 3 EtherCAT solutions and example applications. Quickly incorporate connectivity to your designs with EtherCAT ICs, modules, software and development kits that make connecting effortless for your customers. Our comprehensive EtherCAT portfolio has the technology to meet your range, data rate, interoperability, frequency and topology needs. Refer to the following links for release notes, training materials, and interface reference information. - [Release Notes](/ethercat/release_notes.html) - [MPLAB® Harmony License](/ethercat/mplab_harmony_license.html) - [MPLAB® Harmony 3 EtherCAT Wiki](https://github.com/Microchip-MPLAB-Harmony/EtherCAT/wiki) - [MPLAB® Harmony 3 EtherCAT API Help](https://microchip-mplab-harmony.github.io/EtherCAT) # Contents Summary | Folder | Description | --- | --- | apps | Example applications for EtherCAT library components | config | EtherCAT module configuration file | docs | EtherCAT library help documentation (html format) | drivers | Driver/Firmware files for different products | # Cloning EtherCAT Microchip-MPLAB-Harmony github repo To clone or download the repo from https://github.com/Microchip-MPLAB-Harmony/ethercat , go to the main page of this repository and then click **code->clone** button to **Clone with HTTPS** this repo using or download as zip file. EtherCAT , CSP , MHC and Dev Pack mdoule repositories can be downloaded using content manager by following the **MPLAB® Harmony Repository Download** of https://github.com/Microchip-MPLAB-Harmony/ethercat/wiki/create-your-first-ethercat-application. **NOTE** - Prior to using the EtherCAT demonstration, it is recommended to review the MPLAB® Harmony Release Notes (release_notes.md) for any known issues. ## EtherCAT Library and Demo Application This distribution package contains MPLAB Harmony EtherCAT firmware project that demonstrate the capabilities of Process Data Objects( counter and Trigger objects) and FoE( File Over EtherCAT ,Firmware upgrade feature) . The project describes its hardware setup and requirements. The EVB-LAN9252_SAM D51 Evaluation Board is an EtherCAT slave controller with dual integrated Ethernet PHYs. Each Ethernet PHY contains a Full-Duplex 100BASE-TX transceiver and supports 100 Mbps (100BASE-TX) operation. * [EVB LAN9252 SAMD51 (LAN9252 - EtherCAT Slave Controller evaluation kit with SAMD51 Microcontroller )](https://www.microchip.com/DevelopmentTools/ProductDetails/PartNO/EV44C93A#:~:text=EVB%2DLAN9252%2DD51%20allows%20engineers,within%20the%20Microchip%20Harmony%20Framework) All the EtherCAT applications are available in ethercat/apps folder. All the drivers are located in the ethercat/drivers folder. The distribution package also contains details about EtherCAT Slave stack code generation tool and also it contains details of EtherCAT manager ,where the demo is verified with TwinCAT manager. | Name | Description | -------- | ----------- | [ethercat_library_lan925x](/ethercat/driver/readme.html) | This library explains about EtherCAT slave controller Interface layer w.r.t LAN9252 device | [ethercat_counter_foe_app](/ethercat/apps/ethercat_counter_foe_app/readme.html)| This example application demonstrates the capable of doing firmware updates via FoE (File over EtherCAT) and EtherCAT Master slave communication with SAMD51 micro-controller. | ____ [![License](https://img.shields.io/badge/license-Harmony%20license-orange.svg)](https://github.com/Microchip-MPLAB-Harmony/ethercat/blob/master/mplab_harmony_license.md) [![Latest release](https://img.shields.io/github/release/Microchip-MPLAB-Harmony/ethercat.svg)](https://github.com/Microchip-MPLAB-Harmony/ethercat/releases/latest) [![Latest release date](https://img.shields.io/github/release-date/Microchip-MPLAB-Harmony/ethercat.svg)](https://github.com/Microchip-MPLAB-Harmony/ethercat/releases/latest) [![Commit activity](https://img.shields.io/github/commit-activity/y/Microchip-MPLAB-Harmony/ethercat.svg)](https://github.com/Microchip-MPLAB-Harmony/ethercat/graphs/commit-activity) [![Contributors](https://img.shields.io/github/contributors-anon/Microchip-MPLAB-Harmony/ethercat.svg)]() ____ [![Follow us on Youtube](https://img.shields.io/badge/Youtube-Follow%20us%20on%20Youtube-red.svg)](https://www.youtube.com/user/MicrochipTechnology) [![Follow us on LinkedIn](https://img.shields.io/badge/LinkedIn-Follow%20us%20on%20LinkedIn-blue.svg)](https://www.linkedin.com/company/microchip-technology) [![Follow us on Facebook](https://img.shields.io/badge/Facebook-Follow%20us%20on%20Facebook-blue.svg)](https://www.facebook.com/microchiptechnology/) [![Follow us on Twitter](https://img.shields.io/twitter/follow/MicrochipTech.svg?style=social)](https://twitter.com/MicrochipTech) [![](https://img.shields.io/github/stars/Microchip-MPLAB-Harmony/ethercat.svg?style=social)]() [![](https://img.shields.io/github/watchers/Microchip-MPLAB-Harmony/ethercat.svg?style=social)]() ",
    "url": "http://localhost:4000/ethercat/",
    "relUrl": "/"
  }
}
`;
var data_for_search

var repo_name = "ethercat";
var doc_folder_name = "docs";
var localhost_path = "http://localhost:4000/";
var home_index_string = "EtherCAT Library and Applications";

(function (jtd, undefined) {

// Event handling

jtd.addEvent = function(el, type, handler) {
  if (el.attachEvent) el.attachEvent('on'+type, handler); else el.addEventListener(type, handler);
}
jtd.removeEvent = function(el, type, handler) {
  if (el.detachEvent) el.detachEvent('on'+type, handler); else el.removeEventListener(type, handler);
}
jtd.onReady = function(ready) {
  // in case the document is already rendered
  if (document.readyState!='loading') ready();
  // modern browsers
  else if (document.addEventListener) document.addEventListener('DOMContentLoaded', ready);
  // IE <= 8
  else document.attachEvent('onreadystatechange', function(){
      if (document.readyState=='complete') ready();
  });
}

// Show/hide mobile menu

function initNav() {
  jtd.addEvent(document, 'click', function(e){
    var target = e.target;
    while (target && !(target.classList && target.classList.contains('nav-list-expander'))) {
      target = target.parentNode;
    }
    if (target) {
      e.preventDefault();
      target.parentNode.classList.toggle('active');
    }
  });

  const siteNav = document.getElementById('site-nav');
  const mainHeader = document.getElementById('main-header');
  const menuButton = document.getElementById('menu-button');

  jtd.addEvent(menuButton, 'click', function(e){
    e.preventDefault();

    if (menuButton.classList.toggle('nav-open')) {
      siteNav.classList.add('nav-open');
      mainHeader.classList.add('nav-open');
    } else {
      siteNav.classList.remove('nav-open');
      mainHeader.classList.remove('nav-open');
    }
  });
}
// Site search

function initSearch() {

    data_for_search = JSON.parse(myVariable);
    lunr.tokenizer.separator = /[\s/]+/

    var index = lunr(function () {
        this.ref('id');
        this.field('title', { boost: 200 });
        this.field('content', { boost: 2 });
        this.field('url');
        this.metadataWhitelist = ['position']

        var location = document.location.pathname;
        var path = location.substring(0, location.lastIndexOf("/"));
        var directoryName = path.substring(path.lastIndexOf("/")+1);

        var cur_path_from_repo = path.substring(path.lastIndexOf(repo_name));

        // Decrement depth by 2 as HTML files are placed in repo_name/doc_folder_name
        var cur_depth_from_doc_folder = (cur_path_from_repo.split("/").length - 2);

        var rel_path_to_doc_folder = "";

        if (cur_depth_from_doc_folder == 0) {
            rel_path_to_doc_folder = "./"
        }
        else {
            for (var i = 0; i < cur_depth_from_doc_folder; i++)
            {
                rel_path_to_doc_folder = rel_path_to_doc_folder + "../"
            }
        }

        for (var i in data_for_search) {

            data_for_search[i].url = data_for_search[i].url.replace(localhost_path + repo_name, rel_path_to_doc_folder);

            if (data_for_search[i].title == home_index_string)
            {
                data_for_search[i].url = data_for_search[i].url + "index.html"
            }

            this.add({
                id: i,
                title: data_for_search[i].title,
                content: data_for_search[i].content,
                url: data_for_search[i].url
            });
        }
    });

    searchResults(index, data_for_search);


